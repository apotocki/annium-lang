let v0 = [1, runtime_cast(2), 3.1];

fn num_arr_to_string(:[integer|decimal])->[string] {
    return make_array(from_iterator: make_transform_iterator(from_iterator: iterator($0), functor: fn($x)->string => to_string($x)`));
}

let strings = num_arr_to_string(v0);
//let strings = make_array(from_iterator: make_transform_iterator(from_iterator: iterator(v0), functor: fn($x)->string => to_string($x)`));
for v in strings {
   print(v, ", ");
}

/*
//let v1 = make_array(from_iterator: iterator(v0));
//let v1 = make_array(from_iterator: make_transform_iterator(from_iterator: iterator(v0), functor: fn($x)=>to_string($x)`));
//let v1 = make_array(from_iterator: make_transform_iterator(from_iterator: iterator(v0), functor: fn($x)->decimal =>$x + 1`));
let v1 = make_array(from_iterator: make_transform_iterator(from_iterator: iterator(v0), functor: fn[val: runtime_cast(2)]($x)->decimal =>$x + val`));
//assert_equal(size(v1), 3);
for v in v1 {
    print(to_string(v), ", ");
}

//print(to_string(typeof(v1)));

//let v0 = [runtime_cast(1), runtime_cast(2), runtime_cast(3)];

//let v0str = [{ for $v in $v0 { yield to_string($v); }}];
//let v0str = [{ yield "abc"; }];
//print(to_string(v0));


//if v0.0 != 3.1 {
//    let vstr = apply(to: v0.2, visitor: fn($x) => to_string($x)`);
//    print(vstr);
//}

//for v in v0 {
//    print(to_string(v));
//    //print(apply(to: v, visitor: fn($x) => to_string($x)`), ", ");
//}
*/