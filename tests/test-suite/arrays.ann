// monotyped array with all runtime elements
let v0 = [runtime_cast(1), runtime_cast(2), runtime_cast(3)];
assert_equal(size(v0), 3);
assert_equal(v0[0], 1);
assert_equal(v0[1], 2);
assert_equal(v0[2], 3);

// monotyped array constructed with mixed compile-time and runtime elements
let v1 = [1, runtime_cast(2), 3];
assert_equal(size(v1), 3);
assert_equal(v1[0], 1);
assert_equal(v1[1], 2);
assert_equal(v1[2], 3);

// polytyped array
let v2 = [1, 3.1];
assert_equal(size(v2), 2);
assert_equal(v2[0], 1);
assert_equal(v2[1], 3.1);

// polytyped array constructed with mixed compile-time and runtime elements
let v3 = [1, runtime_cast(2), 3.1];
assert_equal(size(v0), 3);
assert_equal(v3[0], 1);
assert_equal(v3[1], 2);
assert_equal(v3[2], 3.1);

let it = iterator(v3);
assert(has_next(it));
assert_equal(next(it), 1);
assert_equal(next(it), 2);
assert_equal(next(it), 3.1);
assert(!has_next(it));

let v4 = make_array(from_iterator: iterator(v3));
assert_equal(size(v4), 3);

let strings = make_array(from_iterator: make_transform_iterator(from_iterator: iterator(v3), functor: fn($x)->string => to_string($x)`));
assert_equal(size(strings), 3);
assert_equal(strings[0], "1");
assert_equal(strings[1], "2");
assert_equal(strings[2], "3.1");

fn num_arr_to_string(:[integer|decimal])->[string] {
    return make_array(from_iterator: make_transform_iterator(from_iterator: iterator($0), functor: fn($x)->string => to_string($x)`));
}

let strings2 = num_arr_to_string(v3);
assert_equal(size(strings2), 3);
assert_equal(strings2[0], "1");
assert_equal(strings2[1], "2");
assert_equal(strings2[2], "3.1");
